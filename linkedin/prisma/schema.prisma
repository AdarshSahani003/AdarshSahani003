// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  passwordHash  String
  name          String
  handle        String        @unique
  image         String?
  headline      String?
  location      String?
  about         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  experiences   Experience[]
  educations    Education[]
  skills        Skill[]

  posts         Post[]
  comments      Comment[]
  likes         Like[]

  initiatedConnections Connection[] @relation("initiatedConnections")
  receivedConnections  Connection[] @relation("receivedConnections")

  conversationsA Conversation[] @relation("conversationsA")
  conversationsB Conversation[] @relation("conversationsB")
  messages       Message[]

  applications  Application[]
}

model Experience {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  description String?
}

model Education {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  school      String
  degree      String?
  field       String?
  startYear   Int?
  endYear     Int?
  description String?
}

model Skill {
  id     String @id @default(cuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Post {
  id        String    @id @default(cuid())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Connection {
  id           String           @id @default(cuid())
  requester    User             @relation("initiatedConnections", fields: [requesterId], references: [id])
  requesterId  String
  addressee    User             @relation("receivedConnections", fields: [addresseeId], references: [id])
  addresseeId  String
  status       ConnectionStatus @default(PENDING)
  createdAt    DateTime         @default(now())

  @@unique([requesterId, addresseeId])
}

model Conversation {
  id        String @id @default(cuid())
  userA     User   @relation("conversationsA", fields: [userAId], references: [id])
  userAId   String
  userB     User   @relation("conversationsB", fields: [userBId], references: [id])
  userBId   String
  messages  Message[]
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
}

model Company {
  id        String  @id @default(cuid())
  name      String
  logoUrl   String?
  website   String?
  location  String?
  jobs      Job[]
}

model Job {
  id          String   @id @default(cuid())
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  title       String
  description String
  location    String?
  createdAt   DateTime @default(now())
  applications Application[]
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW
  OFFER
  REJECTED
}

model Application {
  id        String             @id @default(cuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  job       Job                @relation(fields: [jobId], references: [id])
  jobId     String
  status    ApplicationStatus  @default(APPLIED)
  createdAt DateTime           @default(now())
}
